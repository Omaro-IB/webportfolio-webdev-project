{
  "text": {
    "home_sub": "Data Science, Networking, & Dev",
    "home": "<p>I'm a Computer Science graduate with multiple internships, and currently interning at <a href='https://clear-sky.ai/'><u>Clearsky AI</u></a>. I am focusing on data science, software development (Web/Android), and am particularly interested in computer vision and computational mathematics. I also like network engineering and cybersecurity too.<br /><br />Successfully completed my bachelor's degree in computing, with distinction and specialization in Artificial Intelligence, and a computer vision related thesis.</p>",
    "specializations": [
      ["Computer Vision", "Networking & Sys Admin", "Android Dev", "Web Dev"],
      [["img:mu.svg"], ["img:gnu.svg"], ["img:Kotlin.svg", "img:JetpackCompose.svg"], ["img:NodeJS.svg", "img:React.svg"]],
      ["https://mulab.ai/member/omar.ibrahim/", "https://en.wikipedia.org/wiki/System_administrator", "https://developer.android.com/compose", "https://www.geeksforgeeks.org/mern-stack/"],
      ["mulab.ai", "Networking & Unix", "Jetpack Compose & Kotlin", "MERN Stack"]],
    "philosophy": [
      ["Iterative Design", "Bold innovation", "Quality Over Quantity", "Less is More - Elegance"],
      ["Nothing—especially in tech—is ever truly 'finished.' By embracing iterative design and ensuring products are scalable from the outset, we unlock their full potential and pave the way for continuous growth and improvement.",
      "In today's fast-paced digital landscape, pushing the boundaries of what's possible means embracing innovation to redefine how we solve problems, transform industries, and shape the world around us.",
      "Emphasizing quality over quantity means creating thoughtful, high-impact solutions that stand the test of time rather than pursuing rapid, short-lived results.",
      "Everything should be accomplished with the least overhead and complexity as possible. <a href='https://berthub.eu/articles/posts/a-2024-plea-for-lean-software/'><u>Opening a garage door should not take more than 50 million lines of code</u></a>. Achieving this efficiency was one of the highest values of computer programmers, and the best programs were often called <a href='https://en.m.wikipedia.org/w/index.php?title=Elegance&diffonly=true'><u>elegant</u></a>, a term used by mathematicians to describe a proof which is tidy, parsimonious, and powerful."
      ]
    ],
    "whoami": "<p>I'm a Computer Science graduate with multiple internships, and currently interning at <a href='https://clear-sky.ai/'><u>Clearsky AI</u></a>. I am focusing on data science, software development (Web/Android), and am particularly interested in computer vision and computational mathematics. I also like network engineering and cybersecurity too.<br /><br />Successfully completed my bachelor's degree in computing, with distinction and specialization in Artificial Intelligence, and a computer vision related thesis.</p>"
  },
  "projects": [
    {"id": "360camera-CV-project", "title": "Inverted 360 camera mosaic using openCV", "description": "My undergrad thesis capstone project to record 16 view-points of the same object.", "demo": "disabled", "learn_more": "disabled", "skills": ["img:opencv.png", "img:Numpy.svg", "img:flask.png", "txt:Data Mining"]},
    {"id": "webportfolio-webdev-project", "title": "Web Portfolio", "description": "This web portfolio.", "demo":  "https://omarwebportfolio.nfshost.com/", "learn_more": "20240818-WebPortfolio", "skills":  ["img:NodeJS.svg", "img:Express.png", "img:React.svg", "img:MongoDB.png", "img:JavaScript.png", "img:AWS.png"]},
    {"id": "trafficpredictor-ML-project", "title": "Network Traffic Prediction", "description": "Accurately predict types of internet traffic using recurrent neural networks and Bayes Nets ", "demo":  "disabled", "learn_more": "disabled", "skills": ["img:Python.png", "img:Wireshark.png", "txt:Web Scraping", "img:PyTorch.png", "txt: Bayes", "txt: RNNs"]},
    {"id": "nofusscalendar-android-project", "title": "No Fuss Calendar", "description": "An Android Calendar app that requires no online account for sync, simply using an offline file for storage instead", "demo":  "disabled", "learn_more": "disabled", "skills":  ["img:Kotlin.svg", "img:JetpackCompose.svg", "txt:UX Design"]},
    {"id": "remotetv-fullstack-project", "title": "Smart TV Alternative", "description": "Alternative software for your smart TV, enabling control from your phone's browser", "demo":  "disabled", "learn_more": "disabled", "skills":  ["img:Express.png", "img:React.svg", "img:JavaScript.png", "txt:Inter-process communication (IPC)"]},
    {"id": "minimalrecipe-scripting-tool", "title": "Recipe Sanitizer", "description": "Cleanly format and downloading online recipes for offline storage and dodging all the ads/other annoying nonsense", "demo":  "auto", "learn_more": "disabled", "skills": ["img:Python.png", "txt:Web Scraping", "img:Selenium.svg"]},
    {"id": "tutor-webdev-project", "title": "Two-Tors", "description": "A landing/advert web page for a tutoring service", "demo":  "https://two-tors.web.app/", "learn_more": "disabled", "skills":  ["img:NodeJS.svg", "img:Express.png", "img:React.svg", "img:MongoDB.png", "img:JavaScript.png", "img:AWS.png"]}
  ],
  "blogs": [
    {"id": "20240818-WebPortfolio",
    "title": "Full Stack Development in a Nutshell - How to Get Started & Free Hosting Options",
    "date": "August 18 2024",
    "description": "A starting point for those looking to start learning or building full stack applications.",
    "medium": "https://medium.com/@omarom.ibra/full-stack-development-in-a-nutshell-how-to-get-started-free-hosting-options-f69eab236cca",
    "linkedin": "https://www.linkedin.com/pulse/full-stack-development-nutshell-how-get-started-free-omar-ibrahim-ll03c/",
    "image": "mern.jpeg",
    "image_subtitle": "The MERN stack",
    "content": "###### \nWelcome to a gentle introduction to full stack development, including a conceptual picture and various hosting options. Continue reading if you want to start learning full stack development or building full stack applications, and don't know where to start.\n######\nThis is not meant to be an in-depth guide; instead, use this if you're not sure where to begin and want to get a full-stack application up and running. Prior programming and CLI knowledge is assumed.\n###### \n\n## Full Stack App Architecture\nBefore we begin, I'd like to give a brief overview of the architecture and concepts of a full stack application.\n######\nIt is possible to use any combination for the front-end, back-end, and database. However, in this article I will be discussing the **MERN Stack** (MongoDB, ExpressJS, React, and NodeJS).\n######\nMERN uses JavaScript for each component, so will give a unified developer interface. Additionally, there is a lot of support between each layer in the stack, a lot of community support, and are becoming a trend in the industry.\n######\n\n![Fullstack Diagram](fullstack.png)\n###### \nA full stack application comprises a **front-end** (were the user interacts), **back-end** (where the business logic lies), **database** (to store persistent data), and a **runtime environment** to power it all.\n######\nThe diagram above illustrates *what uses what*. The user uses the front-end, which uses the back-end, which uses the database, and everything uses the runtime environment.\n###### \nThe **front-end** is the interface through which the user interacts with the application. It essentially gives a pretty and easy way to interact with the back-end and database. The front-end will make calls to the back-end API to add/change/get server data. \n######\nThe **back-end** implements the business logic and data management. It listens to requests from the front-end on **end-points**, and responds accordingly. Back-end servers should follow the [REST](https://en.wikipedia.org/wiki/REST) architectural style, where every **resource** has an associated URL which is the resource's unique address. For example, a news website article is a resource. This resource may be accessed at */api/articles*. An individual article for example could be accessed at */api/articles/317*.  \n######\nThe **database** manages any data that needs to be permanently stored. Adding, modifying, and retrieving documents from the database is managed by the back-end\n######\nFinally, the **runtime environment** powers the aforementioned components. This is simply the engine that compiles/executes the code that powers the front-end and back-end. \n######\n## Front-end using Firebase\nStart your full-stack application by designing and building your front-end. Starting with the front-end will ensure that the user experience comes first, and will also reveal what kind of requirements you have for your back-end.\n######\nA super easy way to host your front-end is with [Firebase](https://firebase.google.com/). Here's a quick walk-through, this shouldn't take more than 10 minutes.\n ###### \n 1. Create an account, go to the [console](https://console.firebase.google.com/), and create a new project\n2. Install using `npm install -g firebase`\n3. Login to your account with `firebase login`, and follow the on-screen instructions.\n4. Enable experimental features (this makes our life so much easier) `firebase experiments:enable webframeworks`\n5. Create a new *root_directory* where all the configuration and React files will live\n6. Make sure you're in your *root_directory* `cd .../root_directory`\n7. Initialise Firebase and  `firebase init hosting`  \n\t* Select \"Use an existing project\" and select a project\n\t* Answer yes to \"Do you want to use a web framework? (experimental)\"\n\t* Select \"React\" and \"JavaScript\" when asked to choose the framework and language\n8. Your file directory should look something like this:\n\t* *root_directory*\n\t\t* hosting\n\t\t\t* node_modules\n\t\t\t* index.html\n\t\t\t* vite.config.js\n\t\t\t* *other React files*\n\t\t* firebase.json\t\n9. Migrate files from previous front-end if applicable\n10. `firebase deploy`\n\n###### \n## Backend Using a VM (Amazon EC2, Oracle Cloud, etc.)\nNext, get your back-end up and running. After you have your front-end up, you may have missing functionality that you need to implement through the back-end. For example, you may want to have an endpoint to submit a form to, large computations, or code that you want to keep secret.\n######\nIf you don't (you only need a simple static/dynamic website which serves content), you can just skip this entirely!\n######\n\n1. Create your instance ([a free Amazon EC2 instance](https://aws.amazon.com/free/) with 1GB of memory should be enough) and install Node and Express\n2. Get the Express app running on the instance, here is a small working `index.js` example to get started:\n```javascript\n// Imports\nconst express = require('express')\nconst cors = require('cors')\nconst http = require('http')\n\nconst app = express()\n\n// Global Middleware\n// CORS middleware\napp.use(cors())\n\n\n// Endpoints\n// GET /test/\napp.get(\"/test\", (req, res, next) =>{\n  res.status(200).send(\"Test response\")\n});\n\n\n// 404 middleware\nconst unknownEndpointMiddleware = (request, response) => {response.status(404).send(\"Unknown Endpoint\")}\napp.use(unknownEndpointMiddleware)\n\n\n// HTTP server\nconst PORT = 80\napp.listen(PORT, <HOSTNAME>, () => {...})\nconsole.log(`Server running on port ${PORT}`)\n\n```\n-  `app.listen(PORT, <HOSTNAME>, () => {...})` ensures the server can receive requests outside of localhost\n-  `app.use(cors)` allows cross-origin requests (so that browsers running your front-end don't block requests to your back-end)\n2. On the dashboard of whatever cloud host provider you chose, under security lists (or firewall rules) -> Make sure your incoming firewall rule is set to allow `PORT` from the IP address that is used by the Firebase site (use `ping <YOUR FIREBASE WEBSITE HOSTNAME>` to figure out the IP address if needed)\n3. On your actual Linux instance -> Make sure your firewall allows incoming traffic from `PORT` as well. Use these commands:\n```\n$ sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport <PORT> -j ACCEPT\n$ sudo netfilter-persistent save\n```\n5. Finally, make requests to your backend from your frontend!\n\t- Axios is a great library for this, I won't be covering this here but [here](https://axios-http.com/docs/intro) is a good starting point.\n\n######\n## Database\nYou can use [MongoDB atlas](https://www.mongodb.com/products/platform/atlas-database) for this, but I prefer to just run it on the same machine my back-end runs on. If you'd like to do so as well, simply [install](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/) the database server. Afterwards, use the `mongosh` command to figure out the database URL. This should start with `mongodb://127.0.0.1`\n######\nNow, you can make calls from your back-end to the database. Here is the updated `index.js` implementing this:\n```javascript\n// START: Imports\nconst express = require('express')\nconst cors = require('cors')\nconst Form = require('./form')\n// END: Imports\n\nconst app = express()\n\n// START: Global Middleware\n// JSON middleware\napp.use(express.json())\n// CORS middleware\napp.use(cors())\n// END: Global Middleware\n\n\n// START: Endpoints\n// POST /submit\napp.post('/submit', (req, res, next) => {\n  const form = new Form({\n    name: req.body.name,\n    email: req.body.email,\n    message: req.body.message,\n  })\n  form.save().then(savedForm => {\n    res.json(savedForm)\n  }).catch(err => res.status(500).send(\"Server Error\"))\n})\n\n// GET /test/\napp.get(\"/test\", (req, res, next) =>{\n  res.status(200).send(\"Test response\")\n});\n// End: Endpoints\n\n\n// 404 middleware\nconst unknownEndpointMiddleware = (request, response) => {response.status(404).send(\"Unknown Endpoint\")}\napp.use(unknownEndpointMiddleware)\n\n\n// HTTP server\nconst httpsServer = https.createServer(credentials, app)\nconst PORT = 443\nconst HOSTNAME = <SERVER HOSTNAME>\nhttpsServer.listen(PORT, HOSTNAME, () => {\n  console.log(`HTTPS server running on port ${PORT}`)\n  console.log(`https://${HOSTNAME}:${PORT}`)\n})\n```\n######\nYour `form.js` file will define the form schema - setting up a rigid structure for which all form documents must follow. This is also where you will connect to your MongoDB server. Here is an example:\n```javascript\nconst mongoose = require('mongoose')\nmongoose.set('strictQuery', false)\n\nconst url = <MONGODB URL>\n\n// Wait for database to connect, logging an error if there is a problem\nmongoose.connect(url)\n  .then(_ => {    console.log('connected to MongoDB')  })\n  .catch(error => {    console.log('error connecting to MongoDB:', error.message)  })\n\n// Schema\nconst formSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true\n  },\n  message: {\n    type: String,\n    required: true\n  },\n})\n\nformSchema.set('toJSON', {\n  transform: (document, returnedObject) => {\n    returnedObject.id = returnedObject._id.toString()\n    delete returnedObject._id\n    delete returnedObject.__v\n  }\n})\n\nmodule.exports = mongoose.model('Form', formSchema)\n\n```\n######\nIf you decided to use Atlas, everything would be the same, except your MongoDB URL will be obtained from Atlas (and will also include your username/password),\n\n###### \n## Use SSL for your backend\nRight now, your backend is serving Express over HTTP, while Firebase is serving React over HTTPS. On all modern browsers this is an obvious security risk, so communication will be blocked unless users explicitly allow insecure content.\n\nSo, you need to enable HTTPS on your backend. To do so, do the following ([source](https://stackoverflow.com/questions/11744975/enabling-https-on-express-js)):\n###### \n~~~javascript\nvar fs = require('fs');\nvar http = require('http');\nvar https = require('https');\nvar privateKey  = fs.readFileSync('<SSL .key file location>', 'utf8');\nvar certificate = fs.readFileSync('<SSL .crt file location>', 'utf8');\n\nvar credentials = {key: privateKey, cert: certificate};\nvar express = require('express');\nvar app = express();\n\n// your express configuration here (you can use the same one from above)\n\nvar httpServer = http.createServer(app);\nvar httpsServer = https.createServer(credentials, app);\n\nhttpsServer.listen(PORT, HOSTNAME, () => {\n  console.log(`HTTPS server running on port ${PORT}`)\n  console.log(`https://${HOSTNAME}:${PORT}`)\n})\n~~~\n###### \n\nTo get an SSL key and certificate, \n* First, you need a domain name -- purchase one and map to your backend public IP (.xyz domains are super cheap and usually go for $1 a year -- this will be your only expense if you follow this guide)\n* Next, get the SSL key and certificate following the instructions at https://certbot.eff.org/instructions\n######\n\n## More Resources\nI'd like to recommend [Full Stack Open](https://fullstackopen.com/en/), an absolutely amazing resource to learning full stack development by the University of Helsinki. All you need to begin is some basic programming fundamentals and problem solving skills!\n###### \nFinally, I'd like to mention some other hosting options. The following options take care of frontend, backend, and your database, making them an easy and comprehensive solution. However, most, if not all will request your credit card information.\n* [Heroku](https://heroku.com/)\n* [Fly.io](https://fly.io/)\n* [Render](https://render.com/)\n* [Cyclic](https://www.cyclic.sh/)\n* [Replit](https://replit.com/)\n* [CodeSandBox](https://codesandbox.io/)"}
  ]
}
